TOPOLOGICAL SORTING
#define MAX_COURSES 10000

typedef struct Node {
    int val;
    struct Node* next;
} Node;

// Adds a directed edge from 'from' to 'to' in the adjacency list
void addEdge(Node** graph, int from, int to) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->val = to;
    newNode->next = graph[from];
    graph[from] = newNode;
}

// Depth-First Search to detect cycles
int dfs(int course, int* visited, Node** graph) {
    if (visited[course] == 1) return 1;  // Cycle detected
    if (visited[course] == 2) return 0;  // Already visited, no cycle here

    visited[course] = 1;  // Mark as visiting
    Node* neighbor = graph[course];
    while (neighbor) {
        if (dfs(neighbor->val, visited, graph)) {
            return 1;  // Cycle found in recursive call
        }
        neighbor = neighbor->next;
    }

    visited[course] = 2;  // Mark as visited
    return 0;  // No cycle
}

// Main function to check if all courses can be finished
int canFinish(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize) {
    Node* graph[MAX_COURSES] = {0};         // Adjacency list for the graph
    int visited[MAX_COURSES] = {0};         // 0: unvisited, 1: visiting, 2: visited

    // Build the graph from prerequisites
    for (int i = 0; i < prerequisitesSize; i++) {
        int to = prerequisites[i][0];
        int from = prerequisites[i][1];
        addEdge(graph, from, to);
    }

    // Perform DFS on each course to check for cycles
    for (int i = 0; i < numCourses; i++) {
        if (visited[i] == 0) {
            if (dfs(i, visited, graph)) {
                return 0;  // Cycle detected, cannot finish all courses
            }
        }
    }

    return 1;  // No cycles found, all courses can be finished
}
OUTPUTS:
Input
numCourses =
2
prerequisites =
[[1,0]]
Output
true
Expected
true

Input
numCourses =
2
prerequisites =
[[1,0],[0,1]]
Output
false
Expected
false

JOHNSON THROTTLE:
#include <stdio.h>
#include <stdlib.h>

#define LEFT -1
#define RIGHT 1

// Function to print the current permutation
void printPermutation(int* perm, int n) {
    for (int i = 0; i < n; i++)
        printf("%d ", perm[i]);
    printf("\n");
}

// Function to find the index of the largest mobile integer
int getLargestMobile(int* perm, int* dir, int n) {
    int largest = 0;
    int index = -1;

    for (int i = 0; i < n; i++) {
        int moveTo = i + dir[i];
        if (moveTo >= 0 && moveTo < n && perm[i] > perm[moveTo]) {
            if (perm[i] > largest) {
                largest = perm[i];
                index = i;
            }
        }
    }
    return index;
}

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void johnsonTrotter(int n) {
    int* perm = (int*)malloc(n * sizeof(int));
    int* dir = (int*)malloc(n * sizeof(int));

    // Initialize permutation and directions
    for (int i = 0; i < n; i++) {
        perm[i] = i + 1;
        dir[i] = LEFT;
    }

    printPermutation(perm, n);

    while (1) {
        int k = getLargestMobile(perm, dir, n);
        if (k == -1)
            break;

        int moveTo = k + dir[k];
        swap(&perm[k], &perm[moveTo]);
        swap(&dir[k], &dir[moveTo]);

        k = moveTo;
        int kVal = perm[k];

        // Reverse the direction of all elements greater than kVal
        for (int i = 0; i < n; i++) {
            if (perm[i] > kVal)
                dir[i] *= -1;
        }

        printPermutation(perm, n);
    }

    free(perm);
    free(dir);
}

int main() {
    int n;
    printf("Enter value of n: ");
    scanf("%d", &n);
    johnsonTrotter(n);
    return 0;
}

KNAPSACK 0/1 ALGORITHM:
#include <stdio.h>
int n,m,w[10],p[10],v[10][10];
void knapsack(int,int,int[],int[]);
int max(int,int);
int main()
{
int i,j;
printf("Enter the no. of items:");
scanf("%d",&n);
printf("Enter the capacity of knapsack:");
scanf("%d",&m);
printf("Enter weights:");
for(i=0;i<n;i++){
scanf("%d",&w[i]);
}
printf("Enter profits:");
for(i=0;i<n;i++){
scanf("%d",&p[i]);
}
knapsack(n,m,w,p);
printf("Optimal Solution:\n");
for(i=0;i<n;i++){
for(j=0;j<n;j++){
printf("%d ",v[i][j]);
}
printf("\n");
}
return 0;
}
void knapsack(int n, int m, int w[],int p[]){
int i,j;
for(i=0;i<n;i++){
for(j=0;j<m;j++){
if(i==0 || j==0){
v[i][j]=0;
}else if(w[i]>j){
v[i][j]=v[i-1][j];
}else{
v[i][j]=max(v[i-1][j],((v[i-1][j-w[i]])+p[i]));
}

12

}
}
}
int max(int a,int b){
if(a>b){
return a;
}else{
return b;
}
}



O/P -

Enter the no. of items:4
Enter the capacity of knapsack:5
Enter weights:2 1 3 2
Enter profits:12 10 20 15
Optimal Solution:
0 0 0 0
0 10 10 10
0 10 10 20
0 10 15 25 
