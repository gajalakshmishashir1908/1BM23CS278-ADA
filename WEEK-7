LEETCODE QUESTION 1 
A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree. Given a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))  are called minimum height trees (MHTs). 
Return a list of all MHTs' root labels. You can return the answer in any order. The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.
SOLUTION:
int* findMinHeightTrees(int n, int** edges, int edgesSize, int* edgesColSize, int* returnSize) {
    if (n == 1) {
        int* result = (int*)malloc(sizeof(int));
        result[0] = 0;
        *returnSize = 1;
        return result;
    }

    // Build graph
    int* degree = (int*)calloc(n, sizeof(int));
    int** graph = (int**)malloc(n * sizeof(int*));
    int* graphColSize = (int*)calloc(n, sizeof(int));

    for (int i = 0; i < n; ++i) {
        graph[i] = (int*)malloc(n * sizeof(int));  // Max possible connections: n-1
    }

    for (int i = 0; i < edgesSize; ++i) {
        int u = edges[i][0];
        int v = edges[i][1];
        graph[u][graphColSize[u]++] = v;
        graph[v][graphColSize[v]++] = u;
        degree[u]++;
        degree[v]++;
    }

    // Queue for leaf nodes
    int* queue = (int*)malloc(n * sizeof(int));
    int front = 0, back = 0;

    for (int i = 0; i < n; ++i) {
        if (degree[i] == 1) {
            queue[back++] = i;
        }
    }

    int remainingNodes = n;

    while (remainingNodes > 2) {
        int layerSize = back - front;
        remainingNodes -= layerSize;

        for (int i = 0; i < layerSize; ++i) {
            int leaf = queue[front++];
            for (int j = 0; j < graphColSize[leaf]; ++j) {
                int neighbor = graph[leaf][j];
                degree[neighbor]--;
                if (degree[neighbor] == 1) {
                    queue[back++] = neighbor;
                }
            }
        }
    }

    *returnSize = back - front;
    int* result = (int*)malloc((*returnSize) * sizeof(int));
    for (int i = 0; i < *returnSize; ++i) {
        result[i] = queue[front + i];
    }

    // Free memory
    for (int i = 0; i < n; ++i) {
        free(graph[i]);
    }
    free(graph);
    free(graphColSize);
    free(degree);
    free(queue);

    return result;
}

LEEETCODE QUESTION2:
We run a preorder depth-first search (DFS) on the root of a binary tree. At each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.  If the depth of a node is D, the depth of its immediate child is D + 1.  The depth of the root node is 0.
If a node has only one child, that child is guaranteed to be the left child. Given the output traversal of this traversal, recover the tree and return its root.

 SOLUTION:

struct TreeNode* recoverFromPreorder(char* traversal) {
    if (traversal == NULL || traversal[0] == '\0') {
        return NULL;
    }

    // Stack to hold nodes during tree construction
    struct TreeNode* stack[1000];  // Assuming max depth doesn't exceed 1000
    int stackSize = 0;
    int i = 0;
    int n = strlen(traversal);

    // Helper function to create a new tree node
    struct TreeNode* createNode(int val) {
        struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
        node->val = val;
        node->left = NULL;
        node->right = NULL;
        return node;
    }

    while (i < n) {
        int depth = 0;
        
        // Count the number of dashes to determine the depth of the node
        while (i < n && traversal[i] == '-') {
            depth++;
            i++;
        }
        
        // Parse the value of the node
        int val = 0;
        while (i < n && isdigit(traversal[i])) {
            val = val * 10 + (traversal[i] - '0');
            i++;
        }

        // Create a new node with the parsed value
        struct TreeNode* node = createNode(val);

        // If the depth is equal to the stack size, the node is a child of the last node
        if (depth == stackSize) {
            // The current node will be the left child of the node at the top of the stack
            if (stackSize > 0 && stack[stackSize - 1]->left == NULL) {
                stack[stackSize - 1]->left = node;
            } else if (stackSize > 0) {
                stack[stackSize - 1]->right = node;
            }
        } else if (depth < stackSize) {
            // Pop nodes from the stack until the depth matches the correct level
            while (stackSize > depth) {
                stackSize--;
            }
            // The current node will be the right child of the node at the top of the stack
            if (stackSize > 0 && stack[stackSize - 1]->left == NULL) {
                stack[stackSize - 1]->left = node;
            } else if (stackSize > 0) {
                stack[stackSize - 1]->right = node;
            }
        }

        // Push the node onto the stack
        stack[stackSize++] = node;
    }

    // The root of the tree will always be the first element in the stack
    return stack[0];
}

